{"version":3,"sources":["components/BasicInfo.js","components/createLanguagesList.js","components/createProficienciesList.js","components/AbilityScore.js","components/getModifier.js","functions/dice.js","components/ScoreCalculator.js","components/Wizard.js","App.js","serviceWorker.js","index.js"],"names":["basicInfoSchema","Yup","shape","chosenName","notRequired","chosenClass","required","chosenRace","BasicInfo","useState","getName","setName","classOptions","setClassOptions","raceOptions","setRaceOptions","getClass","setClass","getRace","setRace","getProficiencies","setproficiencies","getLanguages","setLanguages","useEffect","axios","get","then","response","data","results","handleSubmit","e","raceIndex","classIndex","name","chosenClassIndex","parseInt","url","slice","chosenRaceIndex","languages","forEach","push","proficiencies","render","field","className","style","marginTop","id","value","onChange","setCharachterName","target","width","htmlFor","initialValues","validationSchema","onSubmit","optionLabel","options","placeholder","label","title","expanded","map","item","AbilityScore","props","ability","score","modifier","Math","floor","String","getModifier","dice","sides","random","ScoreCalculator","getStats","setStats","abilityDisplay","Object","keys","key","onClick","newRollsArr","rolls","lowestRoll","min","reduce","acc","i","roll4DropLowest","newRollsObj","Wizard","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.af915110.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Dropdown } from 'primereact/dropdown';\nimport { Button } from 'primereact/button';\nimport { InputText } from 'primereact/inputtext';\nimport { createProficienciesList } from './createProficienciesList';\nimport { createLanguagesList } from './createLanguagesList';\n\nconst basicInfoSchema = Yup.object().shape({\n    chosenName: Yup.string().notRequired(),\n    chosenClass: Yup.string().required('Class is required'),\n    chosenRace: Yup.string().required('Race is required'),\n  });\n\nconst BasicInfo = ()  => {\n    const [getName, setName] = useState(\"\");\n    const [classOptions, setClassOptions] = useState([]);\n    const [raceOptions, setRaceOptions] = useState([]);\n    const [getClass, setClass] = useState(\"\");\n    const [getRace, setRace] = useState(\"\");\n    const [getProficiencies, setproficiencies] = useState([]);\n    const [getLanguages, setLanguages] = useState([]);\n\n    useEffect( () => {\n        axios.get('/classes/')\n        .then((response) => {\n            setClassOptions(response.data.results);\n        });\n        axios.get('/races/')\n        .then((response) => {\n            setRaceOptions(response.data.results);\n        });\n    }, []);\n\n    const handleSubmit = (e) => {\n        const chosenClass = e.chosenClass.name;\n        const chosenRace = e.chosenRace.name;\n        const chosenClassIndex = parseInt(e.chosenClass.url.slice(35));\n        const chosenRaceIndex = parseInt(e.chosenRace.url.slice(33));\n\n        setClass(chosenClass);\n        setRace(chosenRace);\n        getRaceLanguages(chosenRaceIndex);\n        getClassProficiencies(chosenClassIndex);\n    }\n\n    function getRaceLanguages(raceIndex) {\n        axios.get(`/races/${raceIndex}`)\n        .then((response) => {\n        let languages = [];\n        response.data.languages.forEach((e)  => {\n            languages.push(e['name']);\n        });\n        setLanguages(languages);\n        });\n    };\n\n    function getClassProficiencies(classIndex) {\n        axios.get(`/classes/${classIndex}`)\n        .then((response) => {\n        let proficiencies = [];\n        response.data.proficiencies.forEach((e)  => {\n            proficiencies.push(e['name']);\n        });\n        setproficiencies(proficiencies);\n        });\n    };\n\n    const setCharachterName = e => {\n        setName(e);\n    };\n\n    return(\n        <>\n            <h2>Choose name, race & class</h2>\n            <Formik>\n                <Field name=\"chosenName\" render={({field}) =>\n                    <span className='p-float-label' style={{ marginTop: '1rem' }}>\n                        <InputText id='chosenName' {...field}  value={getName} onChange={e => {\n                            setCharachterName(e.target.value)}} style={{ width: '100%' }}/>\n                        <label htmlFor='chosenName'>Enter Name</label>\n                    </span>\n                }/>\n            </Formik>\n            <Formik \n                initialValues={{chosenClass: '', chosenRace: ''}}\n                validationSchema={basicInfoSchema}\n                onSubmit={e => handleSubmit(e)}\n                render={() => (\n                    <Form>\n                        <Field name=\"chosenRace\" render={({field}) =>\n                        <Dropdown\n                            {...field}\n                            style={{ width: '100%', marginTop: '1rem' }}\n                            optionLabel=\"name\"\n                            options={raceOptions}\n                            placeholder=\"Select D&D Race\"/>}/>\n                        <ErrorMessage name='chosenRace'/>\n\n                        <Field name=\"chosenClass\" render={({field}) =>\n                        <Dropdown\n                            {...field}\n                            style={{ width: '100%', marginTop: '1rem' }}\n                            optionLabel=\"name\"\n                            options={classOptions}\n                            placeholder=\"Select D&D Class\"/>}/>\n                        <ErrorMessage name='chosenClass'/>\n                        <Button label=\"Select\" className=\"p-button-raised\" style={{ marginTop: '1rem' }}/>\n                    </Form>\n                )}\n            />\n            <div>\n                <h3 className=\"NameRaceClass\">{getName} {(getName && getRace && getClass) ? \"the\" : null} {getRace} {getClass}</h3>\n            </div>\n            <div>\n                {createProficienciesList(getProficiencies)}\n            </div>\n            <div>\n                {createLanguagesList(getLanguages)}\n            </div>\n        </>\n    );\n};\n\nexport default BasicInfo;","import React from 'react';\nimport { Accordion, AccordionItem } from 'react-sanfona';\n\nexport const createLanguagesList = (languages) => { \n    return (\n        <Accordion>\n            {<AccordionItem className=\"accordion\" title={\"Languages ↓\"} expanded=\"true\">\n                <div>\n                    {languages.map(item => { return (<li className=\"LanguageProficienciesList\">{item}</li>)})}\n                </div>\n            </AccordionItem>}\n        </Accordion>);\n};","import React from 'react';\nimport { Accordion, AccordionItem } from 'react-sanfona';\n\n\nexport const createProficienciesList = (proficiencies) => {\n    return (\n        <Accordion>\n            {<AccordionItem className=\"accordion\" title={\"Proficiencies ↓\"} expanded=\"true\">\n                <div>\n                    {proficiencies.map(item => { return (<li className=\"LanguageProficienciesList\">{item}</li>)})}\n                </div>\n            </AccordionItem>}\n        </Accordion>);\n};","import React from 'react';\nimport { getModifier}  from './getModifier';\n\nconst AbilityScore = (props) => {\n    const { ability, score } = props;\n    return (\n        <div className='stats'>\n            <p className='stats-key'>{ability}</p>\n            <p className='stats-score'>{score}</p>\n            <p className='stats-modifier'>{getModifier(score)}</p>\n        </div> \n    );\n}\n\nexport default AbilityScore;  ","export const getModifier = (ability) => {\n    const modifier = Math.floor((ability - 10) / 2);\n    return modifier > 0 ? String('+' + modifier) : String(modifier);\n}","export const dice = (sides) => Math.floor(Math.random() * sides) + 1;\n\nexport const roll4DropLowest = () => {\n    const rolls = [dice(6), dice(6), dice(6), dice(6)];\n    const lowestRoll = Math.min(...rolls);\n    const result = (rolls.reduce((acc, i) => acc + i)) - lowestRoll;\n    return result;\n}","import React, { useState, useEffect } from 'react';\nimport AbilityScore from './AbilityScore';\nimport { roll4DropLowest } from '../functions/dice'\nimport { Button } from 'primereact/button';\nimport { Accordion, AccordionItem } from 'react-sanfona';\n\nconst ScoreCalculator = () => {\n    const [getStats, setStats] = useState({});\n\n    useEffect(() => {\n        setStats({\n            \"str\": 8,\n            \"dex\": 8,\n            \"con\": 8,\n            \"int\": 8,\n            \"wis\": 8,\n            \"cha\": 8\n        });\n    }, []);\n\n    const rollDice4sStats = () => {\n        const newRollsArr = Object.keys(getStats).map(() => roll4DropLowest());\n        const newRollsObj = {\n            \"str\": newRollsArr[0],\n            \"dex\": newRollsArr[1],\n            \"con\": newRollsArr[2],\n            \"int\": newRollsArr[3],\n            \"wis\": newRollsArr[4],\n            \"cha\": newRollsArr[5]\n        };\n        setStats(newRollsObj);\n    };\n\n    const abilityDisplay = Object.keys(getStats).map(key => {\n        return (<AbilityScore key={key} ability={key} score={getStats[key]}/>);\n    });\n    return (\n        // <div className=\"score-calculator\">\n        <div>\n        <Accordion>\n            {<AccordionItem className=\"accordion\" title={\"Ability Score Calculator ↓\"}>\n                <Button label=\"ROLL 🎲\" className=\"p-button-raised\" style={{ marginTop: '1rem' }} onClick={rollDice4sStats}/>\n                <div className=\"stats-display \">\n                    {abilityDisplay}\n                </div>\n            </AccordionItem>}\n        </Accordion>\n        </div>\n    );\n};\n\nexport default ScoreCalculator;","import React from 'react';\nimport BasicInfo from './BasicInfo';\nimport ScoreCalculator from './ScoreCalculator';\n\nconst Wizard = () => {\n    return(\n        <>\n            <BasicInfo />\n            <ScoreCalculator />\n        </>\n    );\n};\n\nexport default Wizard;\n","import React from 'react';\nimport Wizard from './components/Wizard';\n\nconst App = () => {  \n  return (<>\n      <h1 className=\"app-header\">D&D 5e Character Wizard</h1>\n      <main className=\"app-container\">\n        <article className=\"wizard\">\n          <Wizard />\n        </article>\n      </main>\n    </>);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}